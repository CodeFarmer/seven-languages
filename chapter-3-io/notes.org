* Like

- everything is right there if you look:
  - Lobby getSlot("exit")
  - CLI slotNames
  - CLI prompt := "% "

- you really can do anything you want
  - including set fire to both your feet and then swallow the fire
    extinguisher

- the C interface is simple and easy to poke at

- the message thing is consistent and all-powerful, but you actually
  have to model quite a lot in your head. Maybe it's just practice.

- I disagree about the syntax (it's *not* super clear because simple)
  but the object model is really easy to reason about

- everything is an actor
- everything can be a future

* Dislike

- The community is gone, and they have left surprisingly few docs. The
  standard library appears super powerful, but Google hasn't indexed
  it properly. (https://iolanguage.org/reference/index.html)

- activatables make higher-order functional programming impossible,
  since you can't refer to a method without calling it?
  - wow they really missed that boat
  - you can kind of wrap a method def in a Block() though, still a bit
    crap

  - the interpreter code would have been way simpler!

  - NOTE but see below, setIsActivatable(false) switches it off

- syntax

  - if you make a syntax error pretty much anywhere, even in a simple
    control structure, you are *screwed*

  - semicolons. Sometimes. And if you miss one, the result will not be
    what you think. The lack of syntax (unlike lisp) leads to ambiguity
    and simple mistakes, which the error messages don't help you figure
    out (assuming there is an error message).
    - Actually there is *more* syntax than Lisp, and it leads to
      inconsistency (semicolon again)

  - the variable arguments behaviour makes everything worse

- like Ruby, all the data structures are mutable (except when they're
  not).

- was anyone else's interpreter crashy? it might have been the Emacs
  inferior mode.

* Day 1

$ Object slotNames
  - looks like there's a whole async actor system in there

- if... how do you do else?

- Maps and Lists are mutable (atPut append etc)

- [[https://en.wikibooks.org/wiki/Io_Programming/Io_Style_Guide][Style guide]]

- 0 is truthy

- ::= creates a setter

- foo say := method("moo" println)
- foo getSlot("say") call
  - found by 'method proto slotNames' :)

- so far: it's amazing how much you can figure out without reading the
  docs, once you know about Object, Lobby and slotNames

- Sneaky attempt: slot references within methods point to the owner of
  the slot's other slots, not slots on the method

- How do I create a callable object?
  - Hmm, looks like although method() appears to just clone Block,
  that's not true.
  - are there limits to "everything is off limits"?
  - implementing a call() slot isn't enough
  - Coroutine exists, so it has to be possible
  - isActivatable actually calls a C func, overwriting it does not
    change the interpreter behaviour which still calls the same func
    - this is disappointing
  - method and coroutine both set it in the C layer, Block sets it to 0

- Related: you call an activatable object every time you refer to
  it. So how can you refer to it without calling? They literally killed
  functional programming by adding a feature.

- OK, what does this syntax mean? Block(f)


* Day 2

- Message introspection is powerful but also ubiquitously necessary

- List has flatten()
- spent a while fighting with the lack of syntax errors
  - with great power comes great annoyance

- "I just spent half an hour trying to figure out why my local
  variable assignment seemed to be going to the wrong scope, actually
  I'd forgotten a semicolon."

- comes from not distinguishing between things done for side effects
  and pure functions :P

- This is definitely a toy. It's a cool toy, but it's a toy, missing
  much that would aid dev productivity.

- Serialization/deserialization:

  - File with("m.ser") open write(m serialized) close
  - m := doRelativeFile("m.ser")


* Day 3

- Finally I notice the library docs (other than what's in Guide and
  Tutorial, which is what Google finds you.)
  - https://iolanguage.org/reference/index.html

- OMG I SOLVED THE HIGHER-ORDER FUNCTION THING
  - setIsActivatable is a custom setter that affects the interpreter
    layer in a way that 'foo isActivatable := false' does not.

- I guess if an XmlBuilder is stateful, it's easy to track the indent
  state. But did anyone come up with a better way? I have to admit I'd
  kinda run out of "let's look deep inside Io to try and figure out
  some elegant thing which may or may not exist" by now.

- I am still not super happy with the curlyBrackets attribs argument
  to the Xml builder. It feels like I've almost, but not quite,
  grasped how the message gets evaluated. The hint that I've screwed
  up is that I need to add quotes for the value from the Map,
  but... not for the key?
