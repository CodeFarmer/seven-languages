* Like

- List destructuring is familiar territory
- TCO

* Dislike

- \+ for "not" gahh
- ; for logical-or

* Day 1

- Using SWI Prolog on Mac
  - Some things are different, but it's OK so far
  - 'a' for "all solutions" doesn't work
  - looking at the manual, looks like there's a lot more going on here
    than just a database thingy. Coroutines, TTY interface calls,
    JSON, HTTP...
  - Machine Learning tutuorial
  - PlDoc!!!

- Error reporting takes some getting used to but it works

- So far not clear on "writing facts" vs "querying facts", they look
  the same syntactically...
  - they are the same
  - consult(...) vs query execution
    - see also listing(...)

- Have only typed := instead of :- about a dozen times in the first hour
  - "Full stop in clause-body?  Cannot redefine ,/2"

- colouring(Alabama, Mississippi, Georgia, Tennessee, Florida).

- "An Interview With Brian Tarbox, Dolphon Researcher".
  - Hahahahahahahaha
  - Can't tell you where the overconstraint is or offer partial
    solution

- Didn't do the exercises as they were the same as the examples (maybe
  not expected to do the xamples interactively?)

* Day 2

- Oh hooray, recursive lists. And we're back in my LISPy comfort zone :)

- Tail recursion!
  - Why does he point out declarative languages?

- Lists and Tuples
  - Hey it's got list literals, we can be friends
  - Oh and you can head|tail destructure them. Now we are really friends.
    - And you can nest destructurings :)
      - [a, b, c, d] = [a|[B | CD]]
      - interesting you can do things other than just 'head'
        - [a, b, c, d] = [A, B | T]

- Aha, it has the "don't care" variable _

- interesting. "is" vs "="
  - X = 0+1+1+1+1.
  - X = 4.

  - unification blows the stack a lot, using "is" is like a shortcut?
    - hmm.

- Once you get your head around putting variables in to get results
  out, all the recursive list rule stuff is very straightforward.

- Prolog is used in NLP to express parse rules in Watson!

* Day 3

