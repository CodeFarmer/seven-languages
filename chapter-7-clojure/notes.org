* Like

- Expressive literals - list, vector, map, set

* Dislike

- Having to import anything from defrecord/deftype explicitly, even from required namespaces
- Having to convert dashes to underscores in import (though not require)
- To sum up, this sucks:
  - (ns chapter-7-clojure.day2-test
    (:require [clojure.test :refer :all]
              [chapter-7-clojure.day2 :refer :all])
    (:import  [chapter_7_clojure.day2 Thing]))

* Day 1

- Rationals as a data type
- All of the literals

- sequences

- cons and conj, list vs vector
  - difference between (conj [2 3 4] 1) and (conj '(2 3 4) 1)

- almost everything is a function
  - vectors, maps, sets, even keywords

- convenience
  - sorted-set, hash-set, vector, list constructor functions

- destructuring is awesome

- yeah but what *is* a reader macro?

- Rich Hickey wrote Clojure because he wanted a language to code in
  - this is not always an obvious reason

- Clojure is so much easier to use than Common Lisp
  - less austere, more expressive out of the box

- Interesting: Since the book, the CLR (dotnet) dialect didn't really
  take off, but there is now a JavaScript version that is huge.

* Day 2

- Loop/recur
  - "Clojure does not support implicit tail recursion optimization
    because of limitations of the JVM"
    - I have never fully grokked why this is
    - [ ] TODO look this discussion up
  - Fortunately you don't have to use recur very much

- Macros? In years of Clojure I have written about four.

- (some) doesn't work precisely how it seems...
  - (some #(if (number? %) true %) [:one 2 3 4])
    - :one

- list comprehensions (for)

- It's not obvious in the chapter that everything is immutable, which
  seems like a really important thing to bring up here.

- laziness

- defrecord
  - now has deftype to compete with it
  - I have almost never used this, or defprotocol

- macros
  - I have also almost never used these


* Day 3

- I suspect that day 3 is full of things that ended up being fairly obscure in modern Clojure

- STM stuff
  - ref
  - atom
  - agent
  - future

  - all of this is interesting but it's mostly not used by anyone
    - partly it's because it's relatively easy to avoid state altogether

- multimethods are actually really useful

- it's a pity core.async wasn't around when the book was written, it's
  a much cooler way of thinking about concurrency in Clojure
